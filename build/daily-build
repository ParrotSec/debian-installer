#!/bin/bash
set -euo pipefail

# Load configuration from a separate file if available
CONFIG_FILE="build_config.sh"
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
fi

# Ensure all output is in English
export LANG=C
unset LC_ALL LANGUAGE

# Default values for variables
HOST="${HOST:-people.debian.org}"
BASEDIR="${BASEDIR:-public_html/d-i/images}"
NUM_KEEP="${NUM_KEEP:-30}"

# Function to print headers for logging with timestamps
header() {
    echo "$(date +"%Y-%m-%d %H:%M:%S") $@"
}

# Build the images
build() {
    update
    deps
    header "BUILDING IMAGES"
    $_ROOTCMD make reallyclean > /dev/null
    mkdir -p dest
    touch dest/overview.log
    for t in $(get_build_targets); do
        do_build "$t" &
    done
    wait
    $_ROOTCMD make stats > dest/stats.txt 2>&1 || true
    make release > /dev/null
}

# Function to get list of build targets
get_build_targets() {
    # Override $TARGETS with custom makefile targets
    if [ -z "${TARGETS:-}" ]; then
        $_ROOTCMD make all_list | grep '^build'
    else
        echo "$TARGETS"
    fi
}

# Build individual targets
do_build() {
    local t="$1"
    local err=0

    if [ "$LOG_TO_STDOUT" = 1 ]; then
        set -o pipefail
        ROOTCMDOPTS="$ROOTCMDOPTS" do_build_helper "$t" | tee -a "dest/$t.log" || err=$?
        set +o pipefail
    else
        ROOTCMDOPTS="$ROOTCMDOPTS" do_build_helper "$t" >> "dest/$t.log" || err=$?
    fi

    if [ "$err" -eq 0 ]; then
        overview "$t success"
    else
        overview "$t failed"
        echo "building $t failed, see log file dest/$t.log for details" >&2
    fi
    return "$err"
}

# Function to update source tree
update() {
    if [ ! "${UPDATED:-}" ]; then
        git pull >/dev/null 2>&1 || true
        UPDATED=1
    fi
}

# Install dependencies
deps() {
    local temp
    temp=$(dpkg-checkbuilddeps -B ../debian/control 2>&1 || true)
    local packages
    packages=$(echo "$temp" | sed -e 's%dpkg-checkbuilddeps: Unmet build dependencies: %%')
    apt-get update
    if [ "$packages" ]; then
        DEBIAN_PRIORITY=critical apt-get -y install "$packages"
    fi
    DEBIAN_PRIORITY=critical apt-get -y upgrade
}

# Usage instructions
usage() {
    echo "Usage: $0 <command>"
    echo "Commands:"
    echo "  build-only   Build the images only"
    echo "  build        Build the images"
    echo "  upload       Upload the built images"
    echo "  trim         Trim old builds"
    echo "  all          Build, upload, and trim"
}

# Main script logic
case "${1:-}" in
    build-only) # subcommand
        build
        ;;
    build) # subcommand
        build
        ;;
    upload) # subcommand
        upload
        ;;
    trim) # subcommand
        trim
        ;;
    all) # subcommand
        build
        upload
        trim
        ;;
    *)
        echo "Error: Invalid command"
        usage
        exit 1
        ;;
esac

exit 0
